{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\n/**\n * Custom hook for application navigation with authentication checks\n * Provides consistent navigation methods across the application\n */\nexport const useAppNavigation = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    isAuthenticated\n  } = useAuth();\n\n  /**\n   * Navigate to home page\n   */\n  const goToHome = () => {\n    navigate('/');\n  };\n\n  /**\n   * Navigate to jobs page (requires authentication)\n   * @param {Function} onShowLogin - Callback to show login modal if not authenticated\n   */\n  const goToJobs = onShowLogin => {\n    if (isAuthenticated) {\n      navigate('/jobs');\n    } else if (onShowLogin) {\n      onShowLogin();\n    } else {\n      navigate('/');\n    }\n  };\n\n  /**\n   * Navigate to job detail page\n   * @param {string} jobId - The job ID\n   */\n  const goToJobDetail = jobId => {\n    if (jobId) {\n      navigate(`/job/${jobId}`);\n    }\n  };\n\n  /**\n   * Navigate to user profile (requires authentication)\n   * @param {Function} onShowLogin - Callback to show login modal if not authenticated\n   */\n  const goToProfile = onShowLogin => {\n    if (isAuthenticated) {\n      navigate('/profile');\n    } else if (onShowLogin) {\n      onShowLogin();\n    } else {\n      navigate('/');\n    }\n  };\n\n  /**\n   * Navigate to CV page (requires authentication)\n   * @param {Function} onShowLogin - Callback to show login modal if not authenticated\n   */\n  const goToCV = onShowLogin => {\n    if (isAuthenticated) {\n      navigate('/profile/cv');\n    } else if (onShowLogin) {\n      onShowLogin();\n    } else {\n      navigate('/');\n    }\n  };\n\n  /**\n   * Navigate to company dashboard (requires employer authentication)\n   * @param {Function} onShowLogin - Callback to show login modal if not authenticated\n   */\n  const goToCompanyDashboard = onShowLogin => {\n    if (isAuthenticated) {\n      navigate('/company-dashboard');\n    } else if (onShowLogin) {\n      onShowLogin();\n    } else {\n      navigate('/');\n    }\n  };\n\n  /**\n   * Navigate to company dashboard jobs section\n   */\n  const goToCompanyJobs = () => {\n    navigate('/company-dashboard/jobs');\n  };\n\n  /**\n   * Navigate to company dashboard applications section\n   */\n  const goToCompanyApplications = () => {\n    navigate('/company-dashboard/applications');\n  };\n\n  /**\n   * Navigate to company dashboard analytics section\n   */\n  const goToCompanyAnalytics = () => {\n    navigate('/company-dashboard/analytics');\n  };\n\n  /**\n   * Navigate to company profile section\n   */\n  const goToCompanyProfile = () => {\n    navigate('/company-dashboard/company');\n  };\n\n  /**\n   * Navigate to about page\n   */\n  const goToAbout = () => {\n    navigate('/about');\n  };\n\n  /**\n   * Navigate back in history\n   */\n  const goBack = () => {\n    navigate(-1);\n  };\n\n  /**\n   * Navigate forward in history\n   */\n  const goForward = () => {\n    navigate(1);\n  };\n\n  /**\n   * Replace current route (doesn't add to history)\n   * @param {string} path - The path to navigate to\n   */\n  const replaceTo = path => {\n    navigate(path, {\n      replace: true\n    });\n  };\n\n  /**\n   * Navigate with state\n   * @param {string} path - The path to navigate to\n   * @param {object} state - State to pass to the new route\n   */\n  const navigateWithState = (path, state) => {\n    navigate(path, {\n      state\n    });\n  };\n  return {\n    // Basic navigation\n    goToHome,\n    goToJobs,\n    goToJobDetail,\n    goToProfile,\n    goToCV,\n    goToAbout,\n    // Company navigation\n    goToCompanyDashboard,\n    goToCompanyJobs,\n    goToCompanyApplications,\n    goToCompanyAnalytics,\n    goToCompanyProfile,\n    // History navigation\n    goBack,\n    goForward,\n    // Advanced navigation\n    replaceTo,\n    navigateWithState,\n    // Direct access to navigate function for custom use cases\n    navigate\n  };\n};\n_s(useAppNavigation, \"hVV2spoYpmEsGbOBnzYENhgAwjk=\", false, function () {\n  return [useNavigate, useAuth];\n});","map":{"version":3,"names":["useNavigate","useAuth","useAppNavigation","_s","navigate","isAuthenticated","goToHome","goToJobs","onShowLogin","goToJobDetail","jobId","goToProfile","goToCV","goToCompanyDashboard","goToCompanyJobs","goToCompanyApplications","goToCompanyAnalytics","goToCompanyProfile","goToAbout","goBack","goForward","replaceTo","path","replace","navigateWithState","state"],"sources":["E:/HocTap/Ky8/EXE201/EXE201/PartGo/src/hooks/useAppNavigation.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\n/**\n * Custom hook for application navigation with authentication checks\n * Provides consistent navigation methods across the application\n */\nexport const useAppNavigation = () => {\n    const navigate = useNavigate();\n    const { isAuthenticated } = useAuth();\n\n    /**\n     * Navigate to home page\n     */\n    const goToHome = () => {\n        navigate('/');\n    };\n\n    /**\n     * Navigate to jobs page (requires authentication)\n     * @param {Function} onShowLogin - Callback to show login modal if not authenticated\n     */\n    const goToJobs = (onShowLogin) => {\n        if (isAuthenticated) {\n            navigate('/jobs');\n        } else if (onShowLogin) {\n            onShowLogin();\n        } else {\n            navigate('/');\n        }\n    };\n\n    /**\n     * Navigate to job detail page\n     * @param {string} jobId - The job ID\n     */\n    const goToJobDetail = (jobId) => {\n        if (jobId) {\n            navigate(`/job/${jobId}`);\n        }\n    };\n\n    /**\n     * Navigate to user profile (requires authentication)\n     * @param {Function} onShowLogin - Callback to show login modal if not authenticated\n     */\n    const goToProfile = (onShowLogin) => {\n        if (isAuthenticated) {\n            navigate('/profile');\n        } else if (onShowLogin) {\n            onShowLogin();\n        } else {\n            navigate('/');\n        }\n    };\n\n    /**\n     * Navigate to CV page (requires authentication)\n     * @param {Function} onShowLogin - Callback to show login modal if not authenticated\n     */\n    const goToCV = (onShowLogin) => {\n        if (isAuthenticated) {\n            navigate('/profile/cv');\n        } else if (onShowLogin) {\n            onShowLogin();\n        } else {\n            navigate('/');\n        }\n    };\n\n    /**\n     * Navigate to company dashboard (requires employer authentication)\n     * @param {Function} onShowLogin - Callback to show login modal if not authenticated\n     */\n    const goToCompanyDashboard = (onShowLogin) => {\n        if (isAuthenticated) {\n            navigate('/company-dashboard');\n        } else if (onShowLogin) {\n            onShowLogin();\n        } else {\n            navigate('/');\n        }\n    };\n\n    /**\n     * Navigate to company dashboard jobs section\n     */\n    const goToCompanyJobs = () => {\n        navigate('/company-dashboard/jobs');\n    };\n\n    /**\n     * Navigate to company dashboard applications section\n     */\n    const goToCompanyApplications = () => {\n        navigate('/company-dashboard/applications');\n    };\n\n    /**\n     * Navigate to company dashboard analytics section\n     */\n    const goToCompanyAnalytics = () => {\n        navigate('/company-dashboard/analytics');\n    };\n\n    /**\n     * Navigate to company profile section\n     */\n    const goToCompanyProfile = () => {\n        navigate('/company-dashboard/company');\n    };\n\n    /**\n     * Navigate to about page\n     */\n    const goToAbout = () => {\n        navigate('/about');\n    };\n\n    /**\n     * Navigate back in history\n     */\n    const goBack = () => {\n        navigate(-1);\n    };\n\n    /**\n     * Navigate forward in history\n     */\n    const goForward = () => {\n        navigate(1);\n    };\n\n    /**\n     * Replace current route (doesn't add to history)\n     * @param {string} path - The path to navigate to\n     */\n    const replaceTo = (path) => {\n        navigate(path, { replace: true });\n    };\n\n    /**\n     * Navigate with state\n     * @param {string} path - The path to navigate to\n     * @param {object} state - State to pass to the new route\n     */\n    const navigateWithState = (path, state) => {\n        navigate(path, { state });\n    };\n\n    return {\n        // Basic navigation\n        goToHome,\n        goToJobs,\n        goToJobDetail,\n        goToProfile,\n        goToCV,\n        goToAbout,\n        \n        // Company navigation\n        goToCompanyDashboard,\n        goToCompanyJobs,\n        goToCompanyApplications,\n        goToCompanyAnalytics,\n        goToCompanyProfile,\n        \n        // History navigation\n        goBack,\n        goForward,\n        \n        // Advanced navigation\n        replaceTo,\n        navigateWithState,\n        \n        // Direct access to navigate function for custom use cases\n        navigate\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}