{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // ✅ Thêm dòng này\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  console.log('API Request interceptor - token:', token ? 'exists' : 'missing');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('API Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response3;\n  console.log('API Response interceptor - error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    console.log('401 Unauthorized - clearing auth data and redirecting');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // Don't redirect immediately, let the component handle it\n    // window.location.href = '/';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API functions\nexport const forgotPassword = async email => {\n  try {\n    const response = await api.post('/auth/forgot-password', {\n      email\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n  }\n};\nexport const resetPassword = async (userId, code, newPassword) => {\n  try {\n    const response = await api.post('/auth/reset-password', {\n      userId,\n      code,\n      newPassword\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message;\n  }\n};\nexport const login = async (email, password) => {\n  try {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n\n    // ✅ Lưu token và user vào localStorage\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    if (response.data.user) {\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response6;\n    throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message;\n  }\n};\nexport const register = async userData => {\n  try {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  } catch (error) {\n    var _error$response7;\n    throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message;\n  }\n};\nexport const registerCompany = async companyData => {\n  try {\n    const response = await api.post('/auth/register-company', companyData);\n    return response.data;\n  } catch (error) {\n    var _error$response8;\n    throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message;\n  }\n};\nexport const verifyEmail = async (userId, code) => {\n  try {\n    const response = await api.post('/auth/verify-email', {\n      userId,\n      code\n    });\n\n    // ✅ Lưu token và user sau khi verify thành công\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    if (response.data.user) {\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response9;\n    throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message;\n  }\n};\nexport const resendVerification = async userId => {\n  try {\n    const response = await api.post('/auth/resend-verification', {\n      userId\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response10;\n    throw ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || error.message;\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user'); // ✅ Thêm dòng này\n};\n\n// ✅ Sửa lại hàm getCurrentUser - ưu tiên lấy từ localStorage trước\nexport const getCurrentUser = () => {\n  // Thử lấy user từ localStorage trước (đã lưu khi login)\n  const userStr = localStorage.getItem('user');\n  if (userStr) {\n    try {\n      const user = JSON.parse(userStr);\n      console.log('getCurrentUser - from localStorage:', user);\n      return user;\n    } catch (error) {\n      console.error('getCurrentUser - parse error:', error);\n    }\n  }\n\n  // Nếu không có, thử decode từ token\n  const token = localStorage.getItem('token');\n  console.log('getCurrentUser - token:', token);\n  if (!token) return null;\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    console.log('getCurrentUser - payload:', payload);\n\n    // Token payload có thể có cấu trúc khác nhau\n    const user = {\n      id: payload.userId || payload.id,\n      email: payload.email,\n      role: payload.role,\n      fullName: payload.fullName,\n      company: payload.company\n    };\n\n    // Lưu lại vào localStorage để lần sau không phải decode\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  } catch (error) {\n    console.error('getCurrentUser - error:', error);\n    return null;\n  }\n};\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  if (!token) return false;\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const isValid = payload.exp > Date.now() / 1000;\n\n    // ✅ Nếu token hết hạn, xóa dữ liệu\n    if (!isValid) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n    return isValid;\n  } catch (error) {\n    console.error('isAuthenticated - error:', error);\n    return false;\n  }\n};\nexport const saveProfile = async (userId, profileData) => {\n  try {\n    const response = await api.put('/auth/profile', {\n      userId,\n      profileData\n    });\n\n    // ✅ Cập nhật user trong localStorage\n    if (response.data.user) {\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response11;\n    throw ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data) || error.message;\n  }\n};\nexport const getProfile = async userId => {\n  try {\n    const response = await api.get(`/auth/profile/${userId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response12;\n    throw ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.data) || error.message;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","console","log","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response3","status","data","removeItem","forgotPassword","email","post","_error$response4","message","resetPassword","userId","code","newPassword","_error$response5","login","password","setItem","user","JSON","stringify","_error$response6","register","userData","_error$response7","registerCompany","companyData","_error$response8","verifyEmail","_error$response9","resendVerification","_error$response10","logout","getCurrentUser","userStr","parse","payload","atob","split","id","role","fullName","company","isAuthenticated","isValid","exp","Date","now","saveProfile","profileData","put","_error$response11","getProfile","get","_error$response12"],"sources":["E:/HocTap/Ky8/EXE201/EXE201/PartGo/src/services/authAPI.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create axios instance\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    withCredentials: true, // ✅ Thêm dòng này\n});\n\n// Add token to requests if available\napi.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        console.log('API Request interceptor - token:', token ? 'exists' : 'missing');\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        console.error('API Request interceptor error:', error);\n        return Promise.reject(error);\n    }\n);\n\n// Handle token expiration\napi.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        console.log('API Response interceptor - error:', error.response?.status, error.response?.data);\n        if (error.response?.status === 401) {\n            console.log('401 Unauthorized - clearing auth data and redirecting');\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            // Don't redirect immediately, let the component handle it\n            // window.location.href = '/';\n        }\n        return Promise.reject(error);\n    }\n);\n\n// Auth API functions\nexport const forgotPassword = async (email) => {\n    try {\n        const response = await api.post('/auth/forgot-password', { email });\n        return response.data;\n    } catch (error) {\n        throw error.response?.data || error.message;\n    }\n};\n\nexport const resetPassword = async (userId, code, newPassword) => {\n    try {\n        const response = await api.post('/auth/reset-password', {\n            userId,\n            code,\n            newPassword\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response?.data || error.message;\n    }\n};\n\nexport const login = async (email, password) => {\n    try {\n        const response = await api.post('/auth/login', { email, password });\n\n        // ✅ Lưu token và user vào localStorage\n        if (response.data.token) {\n            localStorage.setItem('token', response.data.token);\n        }\n        if (response.data.user) {\n            localStorage.setItem('user', JSON.stringify(response.data.user));\n        }\n\n        return response.data;\n    } catch (error) {\n        throw error.response?.data || error.message;\n    }\n};\n\nexport const register = async (userData) => {\n    try {\n        const response = await api.post('/auth/register', userData);\n        return response.data;\n    } catch (error) {\n        throw error.response?.data || error.message;\n    }\n};\n\nexport const registerCompany = async (companyData) => {\n    try {\n        const response = await api.post('/auth/register-company', companyData);\n        return response.data;\n    } catch (error) {\n        throw error.response?.data || error.message;\n    }\n};\n\nexport const verifyEmail = async (userId, code) => {\n    try {\n        const response = await api.post('/auth/verify-email', { userId, code });\n\n        // ✅ Lưu token và user sau khi verify thành công\n        if (response.data.token) {\n            localStorage.setItem('token', response.data.token);\n        }\n        if (response.data.user) {\n            localStorage.setItem('user', JSON.stringify(response.data.user));\n        }\n\n        return response.data;\n    } catch (error) {\n        throw error.response?.data || error.message;\n    }\n};\n\nexport const resendVerification = async (userId) => {\n    try {\n        const response = await api.post('/auth/resend-verification', { userId });\n        return response.data;\n    } catch (error) {\n        throw error.response?.data || error.message;\n    }\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user'); // ✅ Thêm dòng này\n};\n\n// ✅ Sửa lại hàm getCurrentUser - ưu tiên lấy từ localStorage trước\nexport const getCurrentUser = () => {\n    // Thử lấy user từ localStorage trước (đã lưu khi login)\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n        try {\n            const user = JSON.parse(userStr);\n            console.log('getCurrentUser - from localStorage:', user);\n            return user;\n        } catch (error) {\n            console.error('getCurrentUser - parse error:', error);\n        }\n    }\n\n    // Nếu không có, thử decode từ token\n    const token = localStorage.getItem('token');\n    console.log('getCurrentUser - token:', token);\n    if (!token) return null;\n\n    try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        console.log('getCurrentUser - payload:', payload);\n\n        // Token payload có thể có cấu trúc khác nhau\n        const user = {\n            id: payload.userId || payload.id,\n            email: payload.email,\n            role: payload.role,\n            fullName: payload.fullName,\n            company: payload.company\n        };\n\n        // Lưu lại vào localStorage để lần sau không phải decode\n        localStorage.setItem('user', JSON.stringify(user));\n\n        return user;\n    } catch (error) {\n        console.error('getCurrentUser - error:', error);\n        return null;\n    }\n};\n\nexport const isAuthenticated = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n\n    try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const isValid = payload.exp > Date.now() / 1000;\n\n        // ✅ Nếu token hết hạn, xóa dữ liệu\n        if (!isValid) {\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n        }\n\n        return isValid;\n    } catch (error) {\n        console.error('isAuthenticated - error:', error);\n        return false;\n    }\n};\n\nexport const saveProfile = async (userId, profileData) => {\n    try {\n        const response = await api.put('/auth/profile', { userId, profileData });\n\n        // ✅ Cập nhật user trong localStorage\n        if (response.data.user) {\n            localStorage.setItem('user', JSON.stringify(response.data.user));\n        }\n\n        return response.data;\n    } catch (error) {\n        throw error.response?.data || error.message;\n    }\n};\n\nexport const getProfile = async (userId) => {\n    try {\n        const response = await api.get(`/auth/profile/${userId}`);\n        return response.data;\n    } catch (error) {\n        throw error.response?.data || error.message;\n    }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}