{"ast":null,"code":"var _jsxFileName = \"E:\\\\HocTap\\\\Ky8\\\\EXE201\\\\EXE201\\\\PartGo\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { forgotPassword as forgotPasswordAPI, resetPassword as resetPasswordAPI, login as loginAPI, register as registerAPI, registerCompany as registerCompanyAPI, verifyEmail as verifyEmailAPI, resendVerification as resendVerificationAPI, logout as logoutAPI, getCurrentUser, isAuthenticated, validateAuthState } from '../services/authAPI';\nimport frontendEmailService from '../services/frontendEmailService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pendingVerification, setPendingVerification] = useState(null);\n\n  // Initialize auth state\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        const savedUser = JSON.parse(localStorage.getItem('user') || 'null');\n        console.log('AuthContext init - savedUser:', savedUser, 'isAuthenticated:', isAuthenticated());\n        if (savedUser && isAuthenticated()) {\n          try {\n            // Validate token with server\n            const validatedUser = await validateAuthState();\n            setUser(validatedUser);\n            console.log('AuthContext - User validated with server:', validatedUser);\n          } catch (error) {\n            console.error('AuthContext - Token validation failed:', error);\n            // Token is invalid, clear auth state\n            setUser(null);\n            logoutAPI();\n          }\n        } else {\n          console.log('AuthContext - No valid auth state found');\n          setUser(null);\n        }\n\n        // Check for pending verification\n        const savedPendingVerification = localStorage.getItem('pendingVerification');\n        if (savedPendingVerification) {\n          try {\n            const verificationData = JSON.parse(savedPendingVerification);\n            setPendingVerification(verificationData);\n          } catch (error) {\n            console.error('Error parsing pending verification:', error);\n            localStorage.removeItem('pendingVerification');\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        setUser(null);\n        logoutAPI();\n      } finally {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n\n  // Register job seeker (Step 1: Send OTP)\n  const register = async userData => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await registerAPI(userData);\n\n      // Store pending verification data\n      const verificationData = {\n        userId: response.userId,\n        email: response.email,\n        expiresIn: response.expiresIn\n      };\n      setPendingVerification(verificationData);\n      localStorage.setItem('pendingVerification', JSON.stringify(verificationData));\n\n      // Gửi email OTP từ frontend\n      try {\n        await frontendEmailService.sendVerificationCode(response.email, response.code || '123456',\n        // Mock code nếu backend không trả về\n        userData.fullName);\n        console.log('✅ Verification email sent from frontend');\n      } catch (emailError) {\n        console.warn('⚠️ Frontend email failed:', emailError);\n        // Không throw error vì backend đã tạo user thành công\n      }\n      return response;\n    } catch (error) {\n      setError(error.message || 'Registration failed');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register company (Step 1: Send OTP)\n  const registerCompany = async companyData => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await registerCompanyAPI(companyData);\n\n      // Store pending verification data\n      const verificationData = {\n        userId: response.userId,\n        companyId: response.companyId,\n        email: response.email,\n        expiresIn: response.expiresIn\n      };\n      setPendingVerification(verificationData);\n      localStorage.setItem('pendingVerification', JSON.stringify(verificationData));\n\n      // Gửi email OTP từ frontend\n      try {\n        await frontendEmailService.sendVerificationCode(response.email, response.code || '123456',\n        // Mock code nếu backend không trả về\n        companyData.name);\n        console.log('✅ Verification email sent from frontend');\n      } catch (emailError) {\n        console.warn('⚠️ Frontend email failed:', emailError);\n        // Không throw error vì backend đã tạo user thành công\n      }\n      return response;\n    } catch (error) {\n      setError(error.message || 'Company registration failed');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login\n  const login = async credentials => {\n    try {\n      var _response$user;\n      setError(null);\n      setLoading(true);\n      const response = await loginAPI(credentials.email, credentials.password);\n\n      // Save token and user data\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('user', JSON.stringify(response.user));\n      console.log('Login - response.user:', response.user);\n      console.log('Login - response.user.companyId:', (_response$user = response.user) === null || _response$user === void 0 ? void 0 : _response$user.companyId);\n      setUser(response.user);\n      return response;\n    } catch (error) {\n      setError(error.message || 'Login failed');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout\n  const logout = onLogoutSuccess => {\n    logoutAPI();\n    setUser(null);\n    setError(null);\n    setPendingVerification(null);\n    localStorage.removeItem('pendingVerification');\n\n    // Call callback if provided\n    if (onLogoutSuccess && typeof onLogoutSuccess === 'function') {\n      onLogoutSuccess();\n    }\n  };\n\n  // Verify email with OTP\n  const verifyEmail = async (userId, code) => {\n    try {\n      var _response$user2, _response$user3;\n      setError(null);\n      setLoading(true);\n      const response = await verifyEmailAPI(userId, code);\n      console.log('VerifyEmail - Full response:', response);\n      console.log('VerifyEmail - response.user:', response.user);\n      console.log('VerifyEmail - response.user.companyId:', (_response$user2 = response.user) === null || _response$user2 === void 0 ? void 0 : _response$user2.companyId);\n\n      // Save token and user data\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('user', JSON.stringify(response.user));\n      console.log('VerifyEmail - response.user:', response.user);\n      console.log('VerifyEmail - response.user.companyId:', (_response$user3 = response.user) === null || _response$user3 === void 0 ? void 0 : _response$user3.companyId);\n      setUser(response.user);\n      setPendingVerification(null);\n      localStorage.removeItem('pendingVerification');\n\n      // Gửi welcome email từ frontend\n      try {\n        await frontendEmailService.sendWelcomeEmail(response.user.email, response.user.fullName, response.user.role);\n        console.log('✅ Welcome email sent from frontend');\n      } catch (emailError) {\n        console.warn('⚠️ Welcome email failed:', emailError);\n        // Không throw error vì verification đã thành công\n      }\n      return response;\n    } catch (error) {\n      setError(error.message || 'Email verification failed');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Resend verification code\n  const resendVerification = async userId => {\n    try {\n      setError(null);\n      const response = await resendVerificationAPI(userId);\n      return response;\n    } catch (error) {\n      setError(error.message || 'Failed to resend verification code');\n      throw error;\n    }\n  };\n\n  // Clear pending verification\n  const clearPendingVerification = () => {\n    setPendingVerification(null);\n    localStorage.removeItem('pendingVerification');\n  };\n\n  // Clear error\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Forgot password\n  const forgotPassword = async email => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await forgotPasswordAPI(email);\n      console.log('Forgot password API response:', response);\n\n      // Store reset data for EmailJS to send\n      const resetData = {\n        userId: response.userId,\n        email: response.email,\n        code: response.code\n      };\n      console.log('Reset data:', resetData);\n\n      // Send OTP via EmailJS\n      await frontendEmailService.sendPasswordResetCode(resetData.email, resetData.code);\n      return resetData;\n    } catch (error) {\n      setError(error.message || 'Failed to send password reset code');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (userId, code, newPassword) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await resetPasswordAPI(userId, code, newPassword);\n      return response;\n    } catch (error) {\n      setError(error.message || 'Failed to reset password');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    pendingVerification,\n    isAuthenticated: !!user,\n    register,\n    registerCompany,\n    login,\n    logout,\n    verifyEmail,\n    resendVerification,\n    forgotPassword,\n    resetPassword,\n    clearPendingVerification,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"wQVqvDyiTV5J19qWB6chSedhh58=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","forgotPassword","forgotPasswordAPI","resetPassword","resetPasswordAPI","login","loginAPI","register","registerAPI","registerCompany","registerCompanyAPI","verifyEmail","verifyEmailAPI","resendVerification","resendVerificationAPI","logout","logoutAPI","getCurrentUser","isAuthenticated","validateAuthState","frontendEmailService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","pendingVerification","setPendingVerification","initAuth","savedUser","JSON","parse","localStorage","getItem","console","log","validatedUser","savedPendingVerification","verificationData","removeItem","userData","response","userId","email","expiresIn","setItem","stringify","sendVerificationCode","code","fullName","emailError","warn","message","companyData","companyId","name","credentials","_response$user","password","token","onLogoutSuccess","_response$user2","_response$user3","sendWelcomeEmail","role","clearPendingVerification","clearError","resetData","sendPasswordResetCode","newPassword","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/HocTap/Ky8/EXE201/EXE201/PartGo/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { forgotPassword as forgotPasswordAPI, resetPassword as resetPasswordAPI, login as loginAPI, register as registerAPI, registerCompany as registerCompanyAPI, verifyEmail as verifyEmailAPI, resendVerification as resendVerificationAPI, logout as logoutAPI, getCurrentUser, isAuthenticated, validateAuthState } from '../services/authAPI';\nimport frontendEmailService from '../services/frontendEmailService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [pendingVerification, setPendingVerification] = useState(null);\n\n    // Initialize auth state\n    useEffect(() => {\n        const initAuth = async () => {\n            try {\n                const savedUser = JSON.parse(localStorage.getItem('user') || 'null');\n                console.log('AuthContext init - savedUser:', savedUser, 'isAuthenticated:', isAuthenticated());\n\n                if (savedUser && isAuthenticated()) {\n                    try {\n                        // Validate token with server\n                        const validatedUser = await validateAuthState();\n                        setUser(validatedUser);\n                        console.log('AuthContext - User validated with server:', validatedUser);\n                    } catch (error) {\n                        console.error('AuthContext - Token validation failed:', error);\n                        // Token is invalid, clear auth state\n                        setUser(null);\n                        logoutAPI();\n                    }\n                } else {\n                    console.log('AuthContext - No valid auth state found');\n                    setUser(null);\n                }\n\n                // Check for pending verification\n                const savedPendingVerification = localStorage.getItem('pendingVerification');\n                if (savedPendingVerification) {\n                    try {\n                        const verificationData = JSON.parse(savedPendingVerification);\n                        setPendingVerification(verificationData);\n                    } catch (error) {\n                        console.error('Error parsing pending verification:', error);\n                        localStorage.removeItem('pendingVerification');\n                    }\n                }\n            } catch (error) {\n                console.error('Auth initialization error:', error);\n                setUser(null);\n                logoutAPI();\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        initAuth();\n    }, []);\n\n    // Register job seeker (Step 1: Send OTP)\n    const register = async (userData) => {\n        try {\n            setError(null);\n            setLoading(true);\n\n            const response = await registerAPI(userData);\n\n            // Store pending verification data\n            const verificationData = {\n                userId: response.userId,\n                email: response.email,\n                expiresIn: response.expiresIn\n            };\n\n            setPendingVerification(verificationData);\n            localStorage.setItem('pendingVerification', JSON.stringify(verificationData));\n\n            // Gửi email OTP từ frontend\n            try {\n                await frontendEmailService.sendVerificationCode(\n                    response.email,\n                    response.code || '123456', // Mock code nếu backend không trả về\n                    userData.fullName\n                );\n                console.log('✅ Verification email sent from frontend');\n            } catch (emailError) {\n                console.warn('⚠️ Frontend email failed:', emailError);\n                // Không throw error vì backend đã tạo user thành công\n            }\n\n            return response;\n        } catch (error) {\n            setError(error.message || 'Registration failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Register company (Step 1: Send OTP)\n    const registerCompany = async (companyData) => {\n        try {\n            setError(null);\n            setLoading(true);\n\n            const response = await registerCompanyAPI(companyData);\n\n            // Store pending verification data\n            const verificationData = {\n                userId: response.userId,\n                companyId: response.companyId,\n                email: response.email,\n                expiresIn: response.expiresIn\n            };\n\n            setPendingVerification(verificationData);\n            localStorage.setItem('pendingVerification', JSON.stringify(verificationData));\n\n            // Gửi email OTP từ frontend\n            try {\n                await frontendEmailService.sendVerificationCode(\n                    response.email,\n                    response.code || '123456', // Mock code nếu backend không trả về\n                    companyData.name\n                );\n                console.log('✅ Verification email sent from frontend');\n            } catch (emailError) {\n                console.warn('⚠️ Frontend email failed:', emailError);\n                // Không throw error vì backend đã tạo user thành công\n            }\n\n            return response;\n        } catch (error) {\n            setError(error.message || 'Company registration failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Login\n    const login = async (credentials) => {\n        try {\n            setError(null);\n            setLoading(true);\n\n            const response = await loginAPI(credentials.email, credentials.password);\n\n            // Save token and user data\n            localStorage.setItem('token', response.token);\n            localStorage.setItem('user', JSON.stringify(response.user));\n\n            console.log('Login - response.user:', response.user);\n            console.log('Login - response.user.companyId:', response.user?.companyId);\n\n            setUser(response.user);\n            return response;\n        } catch (error) {\n            setError(error.message || 'Login failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Logout\n    const logout = (onLogoutSuccess) => {\n        logoutAPI();\n        setUser(null);\n        setError(null);\n        setPendingVerification(null);\n        localStorage.removeItem('pendingVerification');\n\n        // Call callback if provided\n        if (onLogoutSuccess && typeof onLogoutSuccess === 'function') {\n            onLogoutSuccess();\n        }\n    };\n\n    // Verify email with OTP\n    const verifyEmail = async (userId, code) => {\n        try {\n            setError(null);\n            setLoading(true);\n\n            const response = await verifyEmailAPI(userId, code);\n\n            console.log('VerifyEmail - Full response:', response);\n            console.log('VerifyEmail - response.user:', response.user);\n            console.log('VerifyEmail - response.user.companyId:', response.user?.companyId);\n\n            // Save token and user data\n            localStorage.setItem('token', response.token);\n            localStorage.setItem('user', JSON.stringify(response.user));\n\n            console.log('VerifyEmail - response.user:', response.user);\n            console.log('VerifyEmail - response.user.companyId:', response.user?.companyId);\n\n            setUser(response.user);\n            setPendingVerification(null);\n            localStorage.removeItem('pendingVerification');\n\n            // Gửi welcome email từ frontend\n            try {\n                await frontendEmailService.sendWelcomeEmail(\n                    response.user.email,\n                    response.user.fullName,\n                    response.user.role\n                );\n                console.log('✅ Welcome email sent from frontend');\n            } catch (emailError) {\n                console.warn('⚠️ Welcome email failed:', emailError);\n                // Không throw error vì verification đã thành công\n            }\n\n            return response;\n        } catch (error) {\n            setError(error.message || 'Email verification failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Resend verification code\n    const resendVerification = async (userId) => {\n        try {\n            setError(null);\n            const response = await resendVerificationAPI(userId);\n            return response;\n        } catch (error) {\n            setError(error.message || 'Failed to resend verification code');\n            throw error;\n        }\n    };\n\n    // Clear pending verification\n    const clearPendingVerification = () => {\n        setPendingVerification(null);\n        localStorage.removeItem('pendingVerification');\n    };\n\n    // Clear error\n    const clearError = () => {\n        setError(null);\n    };\n\n    // Forgot password\n    const forgotPassword = async (email) => {\n        try {\n            setError(null);\n            setLoading(true);\n\n            const response = await forgotPasswordAPI(email);\n            console.log('Forgot password API response:', response);\n\n            // Store reset data for EmailJS to send\n            const resetData = {\n                userId: response.userId,\n                email: response.email,\n                code: response.code\n            };\n            console.log('Reset data:', resetData);\n\n            // Send OTP via EmailJS\n            await frontendEmailService.sendPasswordResetCode(resetData.email, resetData.code);\n\n            return resetData;\n        } catch (error) {\n            setError(error.message || 'Failed to send password reset code');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Reset password\n    const resetPassword = async (userId, code, newPassword) => {\n        try {\n            setError(null);\n            setLoading(true);\n\n            const response = await resetPasswordAPI(userId, code, newPassword);\n            return response;\n        } catch (error) {\n            setError(error.message || 'Failed to reset password');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const value = {\n        user,\n        loading,\n        error,\n        pendingVerification,\n        isAuthenticated: !!user,\n        register,\n        registerCompany,\n        login,\n        logout,\n        verifyEmail,\n        resendVerification,\n        forgotPassword,\n        resetPassword,\n        clearPendingVerification,\n        clearError\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,cAAc,IAAIC,iBAAiB,EAAEC,aAAa,IAAIC,gBAAgB,EAAEC,KAAK,IAAIC,QAAQ,EAAEC,QAAQ,IAAIC,WAAW,EAAEC,eAAe,IAAIC,kBAAkB,EAAEC,WAAW,IAAIC,cAAc,EAAEC,kBAAkB,IAAIC,qBAAqB,EAAEC,MAAM,IAAIC,SAAS,EAAEC,cAAc,EAAEC,eAAe,EAAEC,iBAAiB,QAAQ,qBAAqB;AACpV,OAAOC,oBAAoB,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,MAAMC,WAAW,gBAAG1B,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAM2B,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,OAAO,GAAG5B,UAAU,CAACyB,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACkC,OAAO,EAAEC,UAAU,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACsC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;;EAEpE;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMuC,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,IAAI;QACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC;QACpEC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEN,SAAS,EAAE,kBAAkB,EAAEtB,eAAe,CAAC,CAAC,CAAC;QAE9F,IAAIsB,SAAS,IAAItB,eAAe,CAAC,CAAC,EAAE;UAChC,IAAI;YACA;YACA,MAAM6B,aAAa,GAAG,MAAM5B,iBAAiB,CAAC,CAAC;YAC/Ca,OAAO,CAACe,aAAa,CAAC;YACtBF,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEC,aAAa,CAAC;UAC3E,CAAC,CAAC,OAAOZ,KAAK,EAAE;YACZU,OAAO,CAACV,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;YAC9D;YACAH,OAAO,CAAC,IAAI,CAAC;YACbhB,SAAS,CAAC,CAAC;UACf;QACJ,CAAC,MAAM;UACH6B,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;UACtDd,OAAO,CAAC,IAAI,CAAC;QACjB;;QAEA;QACA,MAAMgB,wBAAwB,GAAGL,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;QAC5E,IAAII,wBAAwB,EAAE;UAC1B,IAAI;YACA,MAAMC,gBAAgB,GAAGR,IAAI,CAACC,KAAK,CAACM,wBAAwB,CAAC;YAC7DV,sBAAsB,CAACW,gBAAgB,CAAC;UAC5C,CAAC,CAAC,OAAOd,KAAK,EAAE;YACZU,OAAO,CAACV,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;YAC3DQ,YAAY,CAACO,UAAU,CAAC,qBAAqB,CAAC;UAClD;QACJ;MACJ,CAAC,CAAC,OAAOf,KAAK,EAAE;QACZU,OAAO,CAACV,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDH,OAAO,CAAC,IAAI,CAAC;QACbhB,SAAS,CAAC,CAAC;MACf,CAAC,SAAS;QACNkB,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDK,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMhC,QAAQ,GAAG,MAAO4C,QAAQ,IAAK;IACjC,IAAI;MACAf,QAAQ,CAAC,IAAI,CAAC;MACdF,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMkB,QAAQ,GAAG,MAAM5C,WAAW,CAAC2C,QAAQ,CAAC;;MAE5C;MACA,MAAMF,gBAAgB,GAAG;QACrBI,MAAM,EAAED,QAAQ,CAACC,MAAM;QACvBC,KAAK,EAAEF,QAAQ,CAACE,KAAK;QACrBC,SAAS,EAAEH,QAAQ,CAACG;MACxB,CAAC;MAEDjB,sBAAsB,CAACW,gBAAgB,CAAC;MACxCN,YAAY,CAACa,OAAO,CAAC,qBAAqB,EAAEf,IAAI,CAACgB,SAAS,CAACR,gBAAgB,CAAC,CAAC;;MAE7E;MACA,IAAI;QACA,MAAM7B,oBAAoB,CAACsC,oBAAoB,CAC3CN,QAAQ,CAACE,KAAK,EACdF,QAAQ,CAACO,IAAI,IAAI,QAAQ;QAAE;QAC3BR,QAAQ,CAACS,QACb,CAAC;QACDf,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MAC1D,CAAC,CAAC,OAAOe,UAAU,EAAE;QACjBhB,OAAO,CAACiB,IAAI,CAAC,2BAA2B,EAAED,UAAU,CAAC;QACrD;MACJ;MAEA,OAAOT,QAAQ;IACnB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC4B,OAAO,IAAI,qBAAqB,CAAC;MAChD,MAAM5B,KAAK;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAMzB,eAAe,GAAG,MAAOuD,WAAW,IAAK;IAC3C,IAAI;MACA5B,QAAQ,CAAC,IAAI,CAAC;MACdF,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMkB,QAAQ,GAAG,MAAM1C,kBAAkB,CAACsD,WAAW,CAAC;;MAEtD;MACA,MAAMf,gBAAgB,GAAG;QACrBI,MAAM,EAAED,QAAQ,CAACC,MAAM;QACvBY,SAAS,EAAEb,QAAQ,CAACa,SAAS;QAC7BX,KAAK,EAAEF,QAAQ,CAACE,KAAK;QACrBC,SAAS,EAAEH,QAAQ,CAACG;MACxB,CAAC;MAEDjB,sBAAsB,CAACW,gBAAgB,CAAC;MACxCN,YAAY,CAACa,OAAO,CAAC,qBAAqB,EAAEf,IAAI,CAACgB,SAAS,CAACR,gBAAgB,CAAC,CAAC;;MAE7E;MACA,IAAI;QACA,MAAM7B,oBAAoB,CAACsC,oBAAoB,CAC3CN,QAAQ,CAACE,KAAK,EACdF,QAAQ,CAACO,IAAI,IAAI,QAAQ;QAAE;QAC3BK,WAAW,CAACE,IAChB,CAAC;QACDrB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MAC1D,CAAC,CAAC,OAAOe,UAAU,EAAE;QACjBhB,OAAO,CAACiB,IAAI,CAAC,2BAA2B,EAAED,UAAU,CAAC;QACrD;MACJ;MAEA,OAAOT,QAAQ;IACnB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC4B,OAAO,IAAI,6BAA6B,CAAC;MACxD,MAAM5B,KAAK;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAM7B,KAAK,GAAG,MAAO8D,WAAW,IAAK;IACjC,IAAI;MAAA,IAAAC,cAAA;MACAhC,QAAQ,CAAC,IAAI,CAAC;MACdF,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMkB,QAAQ,GAAG,MAAM9C,QAAQ,CAAC6D,WAAW,CAACb,KAAK,EAAEa,WAAW,CAACE,QAAQ,CAAC;;MAExE;MACA1B,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACkB,KAAK,CAAC;MAC7C3B,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACgB,SAAS,CAACL,QAAQ,CAACrB,IAAI,CAAC,CAAC;MAE3Dc,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEM,QAAQ,CAACrB,IAAI,CAAC;MACpDc,OAAO,CAACC,GAAG,CAAC,kCAAkC,GAAAsB,cAAA,GAAEhB,QAAQ,CAACrB,IAAI,cAAAqC,cAAA,uBAAbA,cAAA,CAAeH,SAAS,CAAC;MAEzEjC,OAAO,CAACoB,QAAQ,CAACrB,IAAI,CAAC;MACtB,OAAOqB,QAAQ;IACnB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC4B,OAAO,IAAI,cAAc,CAAC;MACzC,MAAM5B,KAAK;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAMnB,MAAM,GAAIwD,eAAe,IAAK;IAChCvD,SAAS,CAAC,CAAC;IACXgB,OAAO,CAAC,IAAI,CAAC;IACbI,QAAQ,CAAC,IAAI,CAAC;IACdE,sBAAsB,CAAC,IAAI,CAAC;IAC5BK,YAAY,CAACO,UAAU,CAAC,qBAAqB,CAAC;;IAE9C;IACA,IAAIqB,eAAe,IAAI,OAAOA,eAAe,KAAK,UAAU,EAAE;MAC1DA,eAAe,CAAC,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAM5D,WAAW,GAAG,MAAAA,CAAO0C,MAAM,EAAEM,IAAI,KAAK;IACxC,IAAI;MAAA,IAAAa,eAAA,EAAAC,eAAA;MACArC,QAAQ,CAAC,IAAI,CAAC;MACdF,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMkB,QAAQ,GAAG,MAAMxC,cAAc,CAACyC,MAAM,EAAEM,IAAI,CAAC;MAEnDd,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEM,QAAQ,CAAC;MACrDP,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEM,QAAQ,CAACrB,IAAI,CAAC;MAC1Dc,OAAO,CAACC,GAAG,CAAC,wCAAwC,GAAA0B,eAAA,GAAEpB,QAAQ,CAACrB,IAAI,cAAAyC,eAAA,uBAAbA,eAAA,CAAeP,SAAS,CAAC;;MAE/E;MACAtB,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACkB,KAAK,CAAC;MAC7C3B,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACgB,SAAS,CAACL,QAAQ,CAACrB,IAAI,CAAC,CAAC;MAE3Dc,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEM,QAAQ,CAACrB,IAAI,CAAC;MAC1Dc,OAAO,CAACC,GAAG,CAAC,wCAAwC,GAAA2B,eAAA,GAAErB,QAAQ,CAACrB,IAAI,cAAA0C,eAAA,uBAAbA,eAAA,CAAeR,SAAS,CAAC;MAE/EjC,OAAO,CAACoB,QAAQ,CAACrB,IAAI,CAAC;MACtBO,sBAAsB,CAAC,IAAI,CAAC;MAC5BK,YAAY,CAACO,UAAU,CAAC,qBAAqB,CAAC;;MAE9C;MACA,IAAI;QACA,MAAM9B,oBAAoB,CAACsD,gBAAgB,CACvCtB,QAAQ,CAACrB,IAAI,CAACuB,KAAK,EACnBF,QAAQ,CAACrB,IAAI,CAAC6B,QAAQ,EACtBR,QAAQ,CAACrB,IAAI,CAAC4C,IAClB,CAAC;QACD9B,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACrD,CAAC,CAAC,OAAOe,UAAU,EAAE;QACjBhB,OAAO,CAACiB,IAAI,CAAC,0BAA0B,EAAED,UAAU,CAAC;QACpD;MACJ;MAEA,OAAOT,QAAQ;IACnB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC4B,OAAO,IAAI,2BAA2B,CAAC;MACtD,MAAM5B,KAAK;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAMrB,kBAAkB,GAAG,MAAOwC,MAAM,IAAK;IACzC,IAAI;MACAjB,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMgB,QAAQ,GAAG,MAAMtC,qBAAqB,CAACuC,MAAM,CAAC;MACpD,OAAOD,QAAQ;IACnB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC4B,OAAO,IAAI,oCAAoC,CAAC;MAC/D,MAAM5B,KAAK;IACf;EACJ,CAAC;;EAED;EACA,MAAMyC,wBAAwB,GAAGA,CAAA,KAAM;IACnCtC,sBAAsB,CAAC,IAAI,CAAC;IAC5BK,YAAY,CAACO,UAAU,CAAC,qBAAqB,CAAC;EAClD,CAAC;;EAED;EACA,MAAM2B,UAAU,GAAGA,CAAA,KAAM;IACrBzC,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;;EAED;EACA,MAAMnC,cAAc,GAAG,MAAOqD,KAAK,IAAK;IACpC,IAAI;MACAlB,QAAQ,CAAC,IAAI,CAAC;MACdF,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMkB,QAAQ,GAAG,MAAMlD,iBAAiB,CAACoD,KAAK,CAAC;MAC/CT,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEM,QAAQ,CAAC;;MAEtD;MACA,MAAM0B,SAAS,GAAG;QACdzB,MAAM,EAAED,QAAQ,CAACC,MAAM;QACvBC,KAAK,EAAEF,QAAQ,CAACE,KAAK;QACrBK,IAAI,EAAEP,QAAQ,CAACO;MACnB,CAAC;MACDd,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEgC,SAAS,CAAC;;MAErC;MACA,MAAM1D,oBAAoB,CAAC2D,qBAAqB,CAACD,SAAS,CAACxB,KAAK,EAAEwB,SAAS,CAACnB,IAAI,CAAC;MAEjF,OAAOmB,SAAS;IACpB,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC4B,OAAO,IAAI,oCAAoC,CAAC;MAC/D,MAAM5B,KAAK;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAM/B,aAAa,GAAG,MAAAA,CAAOkD,MAAM,EAAEM,IAAI,EAAEqB,WAAW,KAAK;IACvD,IAAI;MACA5C,QAAQ,CAAC,IAAI,CAAC;MACdF,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMkB,QAAQ,GAAG,MAAMhD,gBAAgB,CAACiD,MAAM,EAAEM,IAAI,EAAEqB,WAAW,CAAC;MAClE,OAAO5B,QAAQ;IACnB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC4B,OAAO,IAAI,0BAA0B,CAAC;MACrD,MAAM5B,KAAK;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,MAAM+C,KAAK,GAAG;IACVlD,IAAI;IACJE,OAAO;IACPE,KAAK;IACLE,mBAAmB;IACnBnB,eAAe,EAAE,CAAC,CAACa,IAAI;IACvBxB,QAAQ;IACRE,eAAe;IACfJ,KAAK;IACLU,MAAM;IACNJ,WAAW;IACXE,kBAAkB;IAClBZ,cAAc;IACdE,aAAa;IACbyE,wBAAwB;IACxBC;EACJ,CAAC;EAED,oBACIvD,OAAA,CAACC,WAAW,CAAC2D,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApD,QAAA,EAC9BA;EAAQ;IAAAsD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACxD,GAAA,CArTWF,YAAY;AAAA2D,EAAA,GAAZ3D,YAAY;AAAA,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}