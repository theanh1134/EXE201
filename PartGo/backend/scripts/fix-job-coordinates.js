const mongoose = require('mongoose');
const Job = require('../models/Job');
require('dotenv').config();

// Danh s√°ch t·ªça ƒë·ªô m·∫∑c ƒë·ªãnh cho c√°c th√†nh ph·ªë Vi·ªát Nam
const cityCoordinates = {
    'Ho Chi Minh City': { lat: 10.8231, lng: 106.6297 },
    'H·ªì Ch√≠ Minh': { lat: 10.8231, lng: 106.6297 },
    'Hanoi': { lat: 21.0285, lng: 105.8542 },
    'H√† N·ªôi': { lat: 21.0285, lng: 105.8542 },
    'Da Nang': { lat: 16.0544, lng: 108.2022 },
    'ƒê√† N·∫µng': { lat: 16.0544, lng: 108.2022 },
    'Hai Phong': { lat: 20.8449, lng: 106.6881 },
    'H·∫£i Ph√≤ng': { lat: 20.8449, lng: 106.6881 },
    'Can Tho': { lat: 10.0452, lng: 105.7469 },
    'C·∫ßn Th∆°': { lat: 10.0452, lng: 105.7469 },
    'Bien Hoa': { lat: 10.9510, lng: 106.8340 },
    'Bi√™n H√≤a': { lat: 10.9510, lng: 106.8340 },
    'Nha Trang': { lat: 12.2388, lng: 109.1967 },
    'Hue': { lat: 16.4637, lng: 107.5909 },
    'Hu·∫ø': { lat: 16.4637, lng: 107.5909 },
    'Vung Tau': { lat: 10.3460, lng: 107.0843 },
    'V≈©ng T√†u': { lat: 10.3460, lng: 107.0843 },
    'H√≤a L·∫°c': { lat: 21.0150, lng: 105.5260 },
    'Hoa Lac': { lat: 21.0150, lng: 105.5260 }
};

// H√†m l·∫•y t·ªça ƒë·ªô t·ª´ t√™n th√†nh ph·ªë
function getCoordinatesForCity(cityName) {
    if (!cityName) return null;
    
    // T√¨m exact match
    if (cityCoordinates[cityName]) {
        return cityCoordinates[cityName];
    }
    
    // T√¨m partial match
    const cityLower = cityName.toLowerCase();
    for (const [key, coords] of Object.entries(cityCoordinates)) {
        if (key.toLowerCase().includes(cityLower) || cityLower.includes(key.toLowerCase())) {
            return coords;
        }
    }
    
    // Default to Hanoi if not found
    console.log(`‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y t·ªça ƒë·ªô cho "${cityName}", d√πng H√† N·ªôi m·∫∑c ƒë·ªãnh`);
    return { lat: 21.0285, lng: 105.8542 };
}

async function fixJobCoordinates() {
    try {
        // Connect to MongoDB
        const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/partgo';
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('‚úÖ Connected to MongoDB');

        // Find all jobs
        const jobs = await Job.find({});
        console.log(`üìä Found ${jobs.length} jobs`);

        let fixedCount = 0;
        let alreadyHaveCoords = 0;
        let errors = 0;

        for (const job of jobs) {
            try {
                // Check if job already has coordinates
                if (job.location?.coordinates?.lat && job.location?.coordinates?.lng) {
                    alreadyHaveCoords++;
                    console.log(`‚úì Job "${job.title}" already has coordinates`);
                    continue;
                }

                // Get city name
                const cityName = job.location?.city || job.location?.address;
                if (!cityName) {
                    console.log(`‚ö†Ô∏è  Job "${job.title}" has no city information`);
                    errors++;
                    continue;
                }

                // Get coordinates
                const coords = getCoordinatesForCity(cityName);
                if (!coords) {
                    console.log(`‚ùå Could not get coordinates for "${cityName}"`);
                    errors++;
                    continue;
                }

                // Update job
                if (!job.location) {
                    job.location = {};
                }
                if (!job.location.coordinates) {
                    job.location.coordinates = {};
                }
                
                job.location.coordinates.lat = coords.lat;
                job.location.coordinates.lng = coords.lng;
                
                // Ensure city is set
                if (!job.location.city) {
                    job.location.city = cityName;
                }
                
                // Ensure address is set
                if (!job.location.address) {
                    job.location.address = cityName;
                }

                await job.save();
                fixedCount++;
                console.log(`‚úÖ Fixed coordinates for "${job.title}" (${cityName}): ${coords.lat}, ${coords.lng}`);
            } catch (error) {
                console.error(`‚ùå Error fixing job "${job.title}":`, error.message);
                errors++;
            }
        }

        console.log('\nüìä Summary:');
        console.log(`   Total jobs: ${jobs.length}`);
        console.log(`   ‚úÖ Fixed: ${fixedCount}`);
        console.log(`   ‚úì Already had coordinates: ${alreadyHaveCoords}`);
        console.log(`   ‚ùå Errors: ${errors}`);

        await mongoose.disconnect();
        console.log('\n‚úÖ Disconnected from MongoDB');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Error:', error);
        process.exit(1);
    }
}

// Run the script
fixJobCoordinates();

