const mongoose = require('mongoose');
const Job = require('../models/Job');
require('dotenv').config();

// Danh s√°ch t·ªça ƒë·ªô chi ti·∫øt cho c√°c ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ
const specificLocations = {
    // H√† N·ªôi - c√°c qu·∫≠n/huy·ªán/x√£
    't√¢n x√£': { lat: 21.1833, lng: 105.7167, city: 'H√† N·ªôi' }, // T√¢n X√£, Th·∫°ch Th·∫•t, H√† N·ªôi
    'tan xa': { lat: 21.1833, lng: 105.7167, city: 'H√† N·ªôi' },
    'th·∫°ch th·∫•t': { lat: 21.1833, lng: 105.7167, city: 'H√† N·ªôi' },
    'thach that': { lat: 21.1833, lng: 105.7167, city: 'H√† N·ªôi' },
    'h√≤a l·∫°c': { lat: 21.0150, lng: 105.5260, city: 'H√† N·ªôi' },
    'hoa lac': { lat: 21.0150, lng: 105.5260, city: 'H√† N·ªôi' },
    'c·∫ßu gi·∫•y': { lat: 21.0333, lng: 105.7944, city: 'H√† N·ªôi' },
    'cau giay': { lat: 21.0333, lng: 105.7944, city: 'H√† N·ªôi' },
    'ƒë·ªëng ƒëa': { lat: 21.0167, lng: 105.8167, city: 'H√† N·ªôi' },
    'dong da': { lat: 21.0167, lng: 105.8167, city: 'H√† N·ªôi' },
    'hai b√† tr∆∞ng': { lat: 21.0167, lng: 105.8500, city: 'H√† N·ªôi' },
    'hai ba trung': { lat: 21.0167, lng: 105.8500, city: 'H√† N·ªôi' },
    'ho√†n ki·∫øm': { lat: 21.0285, lng: 105.8542, city: 'H√† N·ªôi' },
    'hoan kiem': { lat: 21.0285, lng: 105.8542, city: 'H√† N·ªôi' },
    'long bi√™n': { lat: 21.0500, lng: 105.8833, city: 'H√† N·ªôi' },
    'long bien': { lat: 21.0500, lng: 105.8833, city: 'H√† N·ªôi' },
    't√¢y h·ªì': { lat: 21.0667, lng: 105.8167, city: 'H√† N·ªôi' },
    'tay ho': { lat: 21.0667, lng: 105.8167, city: 'H√† N·ªôi' },
    'thanh xu√¢n': { lat: 20.9833, lng: 105.8167, city: 'H√† N·ªôi' },
    'thanh xuan': { lat: 20.9833, lng: 105.8167, city: 'H√† N·ªôi' },
    
    // TP.HCM - c√°c qu·∫≠n
    'qu·∫≠n 1': { lat: 10.7769, lng: 106.7009, city: 'H·ªì Ch√≠ Minh' },
    'quan 1': { lat: 10.7769, lng: 106.7009, city: 'H·ªì Ch√≠ Minh' },
    'qu·∫≠n 3': { lat: 10.7756, lng: 106.6888, city: 'H·ªì Ch√≠ Minh' },
    'quan 3': { lat: 10.7756, lng: 106.6888, city: 'H·ªì Ch√≠ Minh' },
    'qu·∫≠n 5': { lat: 10.7569, lng: 106.6639, city: 'H·ªì Ch√≠ Minh' },
    'quan 5': { lat: 10.7569, lng: 106.6639, city: 'H·ªì Ch√≠ Minh' },
    'qu·∫≠n 7': { lat: 10.7378, lng: 106.7197, city: 'H·ªì Ch√≠ Minh' },
    'quan 7': { lat: 10.7378, lng: 106.7197, city: 'H·ªì Ch√≠ Minh' },
    'qu·∫≠n 10': { lat: 10.7756, lng: 106.6639, city: 'H·ªì Ch√≠ Minh' },
    'quan 10': { lat: 10.7756, lng: 106.6639, city: 'H·ªì Ch√≠ Minh' },
    'th·ªß ƒë·ª©c': { lat: 10.8500, lng: 106.7667, city: 'H·ªì Ch√≠ Minh' },
    'thu duc': { lat: 10.8500, lng: 106.7667, city: 'H·ªì Ch√≠ Minh' },
    'b√¨nh th·∫°nh': { lat: 10.8019, lng: 106.7097, city: 'H·ªì Ch√≠ Minh' },
    'binh thanh': { lat: 10.8019, lng: 106.7097, city: 'H·ªì Ch√≠ Minh' },
    'g√≤ v·∫•p': { lat: 10.8378, lng: 106.6639, city: 'H·ªì Ch√≠ Minh' },
    'go vap': { lat: 10.8378, lng: 106.6639, city: 'H·ªì Ch√≠ Minh' },
    
    // ƒê√† N·∫µng
    'h·∫£i ch√¢u': { lat: 16.0678, lng: 108.2208, city: 'ƒê√† N·∫µng' },
    'hai chau': { lat: 16.0678, lng: 108.2208, city: 'ƒê√† N·∫µng' },
    'thanh kh√™': { lat: 16.0544, lng: 108.1544, city: 'ƒê√† N·∫µng' },
    'thanh khe': { lat: 16.0544, lng: 108.1544, city: 'ƒê√† N·∫µng' },
    's∆°n tr√†': { lat: 16.0833, lng: 108.2500, city: 'ƒê√† N·∫µng' },
    'son tra': { lat: 16.0833, lng: 108.2500, city: 'ƒê√† N·∫µng' },
};

// H√†m t√¨m t·ªça ƒë·ªô ch√≠nh x√°c
function getSpecificCoordinates(address, city) {
    if (!address) return null;
    
    const addressLower = address.toLowerCase().trim();
    const cityLower = (city || '').toLowerCase().trim();
    
    console.log(`üîç Searching for: "${addressLower}" in "${cityLower}"`);
    
    // T√¨m exact match
    if (specificLocations[addressLower]) {
        console.log(`‚úÖ Found exact match for "${addressLower}"`);
        return specificLocations[addressLower];
    }
    
    // T√¨m partial match trong address
    for (const [key, coords] of Object.entries(specificLocations)) {
        if (addressLower.includes(key) || key.includes(addressLower)) {
            console.log(`‚úÖ Found partial match: "${key}" for "${addressLower}"`);
            return coords;
        }
    }
    
    // T√¨m trong city n·∫øu kh√¥ng t√¨m th·∫•y trong address
    if (cityLower && specificLocations[cityLower]) {
        console.log(`‚úÖ Found city match for "${cityLower}"`);
        return specificLocations[cityLower];
    }
    
    console.log(`‚ùå No specific location found for "${addressLower}" in "${cityLower}"`);
    return null;
}

async function fixSpecificLocations() {
    try {
        // Connect to MongoDB
        const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/partgo';
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('‚úÖ Connected to MongoDB');

        // Find all jobs
        const jobs = await Job.find({});
        console.log(`üìä Found ${jobs.length} jobs\n`);

        let fixedCount = 0;
        let skippedCount = 0;
        let errors = 0;

        for (const job of jobs) {
            try {
                console.log(`\nüîç Processing: "${job.title}"`);
                console.log(`   Current address: "${job.location?.address || 'N/A'}"`);
                console.log(`   Current city: "${job.location?.city || 'N/A'}"`);
                console.log(`   Current coords: ${job.location?.coordinates?.lat || 'N/A'}, ${job.location?.coordinates?.lng || 'N/A'}`);

                // Get specific coordinates
                const specificCoords = getSpecificCoordinates(
                    job.location?.address,
                    job.location?.city
                );

                if (!specificCoords) {
                    console.log(`   ‚è≠Ô∏è  Skipping - no specific coordinates found`);
                    skippedCount++;
                    continue;
                }

                // Check if coordinates are already correct
                const currentLat = job.location?.coordinates?.lat;
                const currentLng = job.location?.coordinates?.lng;
                
                if (currentLat === specificCoords.lat && currentLng === specificCoords.lng) {
                    console.log(`   ‚úì Already has correct coordinates`);
                    skippedCount++;
                    continue;
                }

                // Update coordinates
                if (!job.location) {
                    job.location = {};
                }
                if (!job.location.coordinates) {
                    job.location.coordinates = {};
                }
                
                job.location.coordinates.lat = specificCoords.lat;
                job.location.coordinates.lng = specificCoords.lng;
                
                // Update city if needed
                if (!job.location.city && specificCoords.city) {
                    job.location.city = specificCoords.city;
                }

                await job.save();
                fixedCount++;
                
                console.log(`   ‚úÖ Updated coordinates to: ${specificCoords.lat}, ${specificCoords.lng}`);
                console.log(`   üîó Google Maps: https://www.google.com/maps/search/?api=1&query=${specificCoords.lat},${specificCoords.lng}`);
                
            } catch (error) {
                console.error(`   ‚ùå Error processing job "${job.title}":`, error.message);
                errors++;
            }
        }

        console.log('\nüìä Summary:');
        console.log(`   Total jobs: ${jobs.length}`);
        console.log(`   ‚úÖ Fixed: ${fixedCount}`);
        console.log(`   ‚è≠Ô∏è  Skipped: ${skippedCount}`);
        console.log(`   ‚ùå Errors: ${errors}`);

        await mongoose.disconnect();
        console.log('\n‚úÖ Disconnected from MongoDB');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Error:', error);
        process.exit(1);
    }
}

// Run the script
fixSpecificLocations();
