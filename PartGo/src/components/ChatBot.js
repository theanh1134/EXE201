import React, { useState, useRef, useEffect } from 'react';

const cannedResponses = [
    { key: /cv|resume|h·ªì\s*s∆°|t·∫°o\s*cv/i, reply: 'B·∫°n c√≥ th·ªÉ v√†o H·ªì s∆° > tab T·∫°o CV ƒë·ªÉ t·∫°o v√† xu·∫•t CV. M√¨nh c√≥ th·ªÉ g·ª£i √Ω m·ª•c ti√™u, kinh nghi·ªám n·∫øu b·∫°n cung c·∫•p th√¥ng tin.' },
    { key: /vi·ªác\s*l√†m|job|t√¨m\s*vi·ªác/i, reply: 'B·∫°n c√≥ th·ªÉ d√πng trang T√¨m vi·ªác v√† b·ªô l·ªçc theo kho·∫£ng c√°ch, l·ªãch h·ªçc, m·ª©c l∆∞∆°ng, k·ªπ nƒÉng ƒë·ªÉ t√¨m vi·ªác ph√π h·ª£p t·∫°i H√≤a L·∫°c.' },
    { key: /kho·∫£ng\s*c√°ch|distance|map|b·∫£n\s*ƒë·ªì/i, reply: 'B·∫≠t ƒë·ªãnh v·ªã tr√¨nh duy·ªát ƒë·ªÉ t√≠nh kho·∫£ng c√°ch th·ª±c t·∫ø. B·∫°n c√≥ th·ªÉ m·ªü Google Maps ch·ªâ ƒë∆∞·ªùng t·ª´ n√∫t ‚ÄúXem b·∫£n ƒë·ªì‚Äù trong th·∫ª vi·ªác l√†m.' },
    { key: /ƒëƒÉng\s*nh·∫≠p|login/i, reply: 'Hi·ªán t√≠nh nƒÉng T·∫°o CV kh√¥ng y√™u c·∫ßu ƒëƒÉng nh·∫≠p. N·∫øu c·∫ßn, ch√∫ng t√¥i s·∫Ω b·∫≠t ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu.' },
];

const defaultReply = 'M√¨nh l√† tr·ª£ l√Ω Part GO. B·∫°n c√≥ th·ªÉ h·ªèi: "G·ª£i √Ω m·ª•c ti√™u CV cho v·ªã tr√≠ b√°n h√†ng", "Vi·∫øt 3 bullet kinh nghi·ªám ph·ª•c v·ª•", "G·ª£i √Ω k·ªπ nƒÉng cho l·∫≠p tr√¨nh vi√™n", ho·∫∑c "T√¨m vi·ªác g·∫ßn t√¥i".';

// Simple rule-based intent handlers (no external API required)
function generateObjective(role = 'v·ªã tr√≠ b·∫°n mu·ªën', company = 'c√¥ng ty m·ª•c ti√™u') {
    return `M·ª•c ti√™u: ·ª®ng tuy·ªÉn ${role} t·∫°i ${company}, t·∫≠n d·ª•ng th·∫ø m·∫°nh v·ªÅ k·ªπ nƒÉng m·ªÅm v√† k·ªπ thu·∫≠t, h·ªçc h·ªèi nhanh, ƒë√≥ng g√≥p k·∫øt qu·∫£ ƒëo ƒë∆∞·ª£c (KPIs) trong 3-6 th√°ng.`;
}

function generateExperienceBullets(role = 'v·ªã tr√≠', achievements = []) {
    const base = [
        `Ph·ª•c v·ª• trung b√¨nh 60-80 kh√°ch/ca, duy tr√¨ m·ª©c h√†i l√≤ng >95%`,
        `T·ªëi ∆∞u quy tr√¨nh/ƒë·ªÅ xu·∫•t c·∫£i ti·∫øn gi√∫p gi·∫£m th·ªùi gian ch·ªù 20%`,
        `H·ªó tr·ª£ ƒë·ªìng ƒë·ªôi, ƒë·∫£m b·∫£o ca l√†m ƒë√∫ng chu·∫©n an to√†n/ch·∫•t l∆∞·ª£ng`,
    ];
    const lines = achievements.length ? achievements : base;
    return `Kinh nghi·ªám (${role}):\n- ${lines.join('\n- ')}`;
}

function suggestSkills(role = '') {
    const map = {
        'b√°n h√†ng': ['Giao ti·∫øp', 'Thuy·∫øt ph·ª•c', 'X·ª≠ l√Ω ph·∫£n ƒë·ªëi', 'POS', 'Qu·∫£n l√Ω tr∆∞ng b√†y'],
        'ph·ª•c v·ª•': ['D·ªãch v·ª• kh√°ch h√†ng', 'Qu·∫£n l√Ω th·ªùi gian', 'V·ªá sinh an to√†n', 'Giao ti·∫øp', 'X·ª≠ l√Ω khi·∫øu n·∫°i'],
        'l·∫≠p tr√¨nh': ['JavaScript', 'React', 'Node.js', 'Git', 'REST API', 'Problem-solving'],
        'marketing': ['Content', 'Social Media', 'Canva', 'Ph√¢n t√≠ch s·ªë li·ªáu', 'SEO c∆° b·∫£n'],
    };
    const key = Object.keys(map).find(k => role.toLowerCase().includes(k)) || '';
    const list = key ? map[key] : ['Giao ti·∫øp', 'L√†m vi·ªác nh√≥m', 'T∆∞ duy ph·∫£n bi·ªán', 'Tin h·ªçc vƒÉn ph√≤ng'];
    return `K·ªπ nƒÉng n√™n c√≥${role ? ` cho ${role}` : ''}: ${list.join(', ')}.`;
}

function generateCoverLetter(role = 'v·ªã tr√≠ ·ª©ng tuy·ªÉn', company = 'c√¥ng ty') {
    return `K√≠nh g·ª≠i ${company},\n\nT√¥i quan t√¢m ƒë·∫øn v·ªã tr√≠ ${role}. V·ªõi kinh nghi·ªám li√™n quan v√† tinh th·∫ßn h·ªçc h·ªèi, t√¥i tin c√≥ th·ªÉ ƒë√≥ng g√≥p ngay t·ª´ th√°ng ƒë·∫ßu. T√¥i s·∫µn s√†ng linh ho·∫°t th·ªùi gian, cam k·∫øt k·∫øt qu·∫£ c·ª• th·ªÉ.\n\nTr√¢n tr·ªçng,\n[H·ªç t√™n]`;
}

function intentEngine(text) {
    const s = text.toLowerCase();
    // Objective
    if (/m·ª•c\s*ti√™u|objective/.test(s)) {
        const role = (s.match(/cho\s*(v·ªã tr√≠|role)\s*([^,\n]+)/)?.[2] || s.match(/(b√°n h√†ng|ph·ª•c v·ª•|l·∫≠p tr√¨nh|marketing)/)?.[1] || 'v·ªã tr√≠ mong mu·ªën');
        const company = (s.match(/t·∫°i\s*([^,\n]+)/)?.[1] || 'c√¥ng ty m·ª•c ti√™u');
        return generateObjective(role, company);
    }
    // Experience bullets
    if (/bullet|kinh\s*nghi·ªám|m√¥\s*t·∫£\s*c√¥ng\s*vi·ªác/.test(s)) {
        const role = (s.match(/(b√°n h√†ng|ph·ª•c v·ª•|l·∫≠p tr√¨nh|marketing)/)?.[1] || 'v·ªã tr√≠');
        return generateExperienceBullets(role);
    }
    // Skills
    if (/k·ªπ\s*nƒÉng|skills?/.test(s)) {
        const role = (s.match(/(b√°n h√†ng|ph·ª•c v·ª•|l·∫≠p tr√¨nh|marketing)/)?.[1] || '');
        return suggestSkills(role);
    }
    // Cover letter
    if (/th∆∞\s*·ª©ng\s*tuy·ªÉn|cover\s*letter/.test(s)) {
        const role = (s.match(/(b√°n h√†ng|ph·ª•c v·ª•|l·∫≠p tr√¨nh|marketing)/)?.[1] || 'v·ªã tr√≠ ·ª©ng tuy·ªÉn');
        const company = (s.match(/t·∫°i\s*([^,\n]+)/)?.[1] || 'c√¥ng ty');
        return generateCoverLetter(role, company);
    }
    // Jobs guidance
    if (/t√¨m\s*vi·ªác|jobs?|g·∫ßn\s*t√¥i|near\s*me/.test(s)) {
        return 'B·∫°n v√†o trang T√¨m vi·ªác (Jobs), d√πng b·ªô l·ªçc kho·∫£ng c√°ch, l·ªãch l√†m, m·ª©c l∆∞∆°ng v√† k·ªπ nƒÉng. Nh·∫•p "Xem b·∫£n ƒë·ªì" ƒë·ªÉ ch·ªâ ƒë∆∞·ªùng t·ª´ v·ªã tr√≠ hi·ªán t·∫°i.';
    }
    return '';
}

export default function ChatBot() {
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState([
        { role: 'bot', text: 'Xin ch√†o! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?' }
    ]);
    const [input, setInput] = useState('');
    const listRef = useRef(null);

    useEffect(() => {
        if (listRef.current) {
            listRef.current.scrollTop = listRef.current.scrollHeight;
        }
    }, [messages, isOpen]);

    const getReply = (text) => {
        const intent = intentEngine(text);
        if (intent) return intent;
        for (const c of cannedResponses) {
            if (c.key.test(text)) return c.reply;
        }
        return defaultReply;
    };

    const sendMessage = () => {
        const trimmed = input.trim();
        if (!trimmed) return;
        const userMsg = { role: 'user', text: trimmed };
        setMessages((prev) => [...prev, userMsg]);
        setInput('');
        // Try AI API; fallback to canned
        const callApi = (url) => fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ messages: [...messages, userMsg] })
        });

        callApi('/api/ai/chat')
            .then(r => r.ok ? r.json() : Promise.reject(new Error('API 404'))) // try proxy first
            .then(data => {
                const botMsg = { role: 'bot', text: data.content || defaultReply };
                setMessages((prev) => [...prev, botMsg]);
            })
            .catch(() => {
                // Fallback to direct server port in dev
                callApi('http://localhost:5001/api/ai/chat')
                    .then(r => r.ok ? r.json() : Promise.reject(new Error('Direct API error')))
                    .then(data => {
                        const botMsg = { role: 'bot', text: data.content || defaultReply };
                        setMessages((prev) => [...prev, botMsg]);
                    })
                    .catch(() => {
                        // Final fallback: call Gemini directly from browser (no proxy)
                        const key = (process.env.REACT_APP_GOOGLE_API_KEY || window.GOOGLE_API_KEY || '').trim();
                        if (!key) {
                            const botMsg = { role: 'bot', text: getReply(trimmed) };
                            setMessages((prev) => [...prev, botMsg]);
                            return;
                        }
                        fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${key}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                contents: [...messages, userMsg].map(m => ({ role: m.role === 'user' ? 'user' : 'model', parts: [{ text: m.text }] }))
                            })
                        })
                            .then(r => r.ok ? r.json() : Promise.reject(new Error('Gemini direct error')))
                            .then(data => {
                                const text = data.candidates?.[0]?.content?.parts?.[0]?.text || defaultReply;
                                const botMsg = { role: 'bot', text };
                                setMessages((prev) => [...prev, botMsg]);
                            })
                            .catch(() => {
                                const botMsg = { role: 'bot', text: getReply(trimmed) };
                                setMessages((prev) => [...prev, botMsg]);
                            });
                    });
            });
    };

    const quickPrompts = [
        'G·ª£i √Ω m·ª•c ti√™u CV cho v·ªã tr√≠ b√°n h√†ng t·∫°i Si√™u th·ªã H√≤a L·∫°c',
        'Vi·∫øt 3 bullet kinh nghi·ªám ph·ª•c v·ª•',
        'G·ª£i √Ω k·ªπ nƒÉng cho l·∫≠p tr√¨nh',
        'M·∫´u th∆∞ ·ª©ng tuy·ªÉn cho v·ªã tr√≠ marketing t·∫°i Nomad',
        'C√°ch t√¨m vi·ªác g·∫ßn t√¥i'
    ];

    return (
        <>
            {/* Floating Button */}
            <button
                onClick={() => setIsOpen(!isOpen)}
                style={{
                    position: 'fixed',
                    right: '20px',
                    bottom: '20px',
                    zIndex: 1050,
                    backgroundColor: '#ff6b35',
                    color: 'white',
                    border: 'none',
                    borderRadius: '50%',
                    width: '56px',
                    height: '56px',
                    boxShadow: '0 8px 24px rgba(255, 107, 53, 0.35)',
                    cursor: 'pointer',
                    fontSize: '22px'
                }}
                aria-label="M·ªü chatbot"
            >
                üí¨
            </button>

            {/* Chat Window */}
            {isOpen && (
                <div
                    style={{
                        position: 'fixed',
                        right: '20px',
                        bottom: '90px',
                        width: '340px',
                        maxHeight: '60vh',
                        backgroundColor: '#fff',
                        borderRadius: '12px',
                        boxShadow: '0 12px 32px rgba(0,0,0,0.15)',
                        display: 'flex',
                        flexDirection: 'column',
                        overflow: 'hidden',
                        zIndex: 1050
                    }}
                >
                    <div style={{ backgroundColor: '#ff6b35', color: 'white', padding: '10px 12px', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                        <strong>Part GO Assistant</strong>
                        <button onClick={() => setIsOpen(false)} style={{ background: 'transparent', color: 'white', border: 'none', fontSize: '20px' }}>√ó</button>
                    </div>

                    <div ref={listRef} style={{ padding: '12px', overflowY: 'auto', flex: 1 }}>
                        {messages.map((m, i) => (
                            <div key={i} style={{ marginBottom: '10px', display: 'flex', justifyContent: m.role === 'user' ? 'flex-end' : 'flex-start' }}>
                                <div
                                    style={{
                                        backgroundColor: m.role === 'user' ? '#f1f3f5' : '#fff8f5',
                                        border: m.role === 'user' ? '1px solid #e9ecef' : '1px solid #ffe3d6',
                                        color: '#2c3e50',
                                        padding: '8px 10px',
                                        borderRadius: '10px',
                                        maxWidth: '75%'
                                    }}
                                >
                                    {m.text}
                                </div>
                            </div>
                        ))}
                        {/* Quick replies */}
                        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '6px', marginTop: '6px' }}>
                            {quickPrompts.map((q, idx) => (
                                <button key={idx} className="btn btn-sm btn-outline-secondary" onClick={() => { setInput(q); setTimeout(() => sendMessage(), 0); }}>
                                    {q}
                                </button>
                            ))}
                        </div>
                    </div>

                    <div style={{ padding: '10px', borderTop: '1px solid #f1f3f4', display: 'flex', gap: '8px' }}>
                        <input
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            onKeyDown={(e) => { if (e.key === 'Enter') sendMessage(); }}
                            placeholder="Nh·∫≠p c√¢u h·ªèi..."
                            className="form-control"
                        />
                        <button className="btn" style={{ backgroundColor: '#ff6b35', color: 'white' }} onClick={sendMessage}>G·ª≠i</button>
                    </div>
                </div>
            )}
        </>
    );
}


