import React from 'react';
import { jobOptions } from '../../../services/jobAPI';
import './JobFilters.css';

const JobFilters = ({ filters, onFilterChange, jobCount }) => {
    const handleChange = (field, value) => {
        onFilterChange({ [field]: value });
    };

    return (
        <div className="job-filters">
            <div className="filters-header">
                <h3 className="filters-title">
                    <span className="filters-icon">üîç</span>
                    B·ªô l·ªçc & T√¨m ki·∫øm
                </h3>
                <span className="filters-count">{jobCount} c√¥ng vi·ªác</span>
            </div>

            <div className="filters-grid">
                {/* Search */}
                <div className="filter-group filter-search">
                    <label className="filter-label">
                        <span className="label-icon">üîé</span>
                        T√¨m ki·∫øm
                    </label>
                    <input
                        type="text"
                        className="filter-input"
                        placeholder="T√¨m theo t√™n, m√¥ t·∫£, ƒë·ªãa ƒëi·ªÉm..."
                        value={filters.search}
                        onChange={(e) => handleChange('search', e.target.value)}
                    />
                </div>

                {/* Status Filter */}
                <div className="filter-group">
                    <label className="filter-label">
                        <span className="label-icon">üìä</span>
                        Tr·∫°ng th√°i
                    </label>
                    <select
                        className="filter-select"
                        value={filters.status}
                        onChange={(e) => handleChange('status', e.target.value)}
                    >
                        <option value="all">T·∫•t c·∫£</option>
                        <option value="published">ƒê√£ ƒëƒÉng</option>
                        <option value="draft">Nh√°p</option>
                        <option value="closed">ƒê√£ ƒë√≥ng</option>
                        <option value="paused">T·∫°m d·ª´ng</option>
                        <option value="expired">H·∫øt h·∫°n</option>
                    </select>
                </div>

                {/* Category Filter */}
                <div className="filter-group">
                    <label className="filter-label">
                        <span className="label-icon">üìÅ</span>
                        Danh m·ª•c
                    </label>
                    <select
                        className="filter-select"
                        value={filters.category}
                        onChange={(e) => handleChange('category', e.target.value)}
                    >
                        <option value="all">T·∫•t c·∫£</option>
                        {jobOptions.categories.map(cat => (
                            <option key={cat.value} value={cat.value}>
                                {cat.label}
                            </option>
                        ))}
                    </select>
                </div>

                {/* Type Filter */}
                <div className="filter-group">
                    <label className="filter-label">
                        <span className="label-icon">üíº</span>
                        Lo·∫°i h√¨nh
                    </label>
                    <select
                        className="filter-select"
                        value={filters.type}
                        onChange={(e) => handleChange('type', e.target.value)}
                    >
                        <option value="all">T·∫•t c·∫£</option>
                        {jobOptions.types.map(type => (
                            <option key={type.value} value={type.value}>
                                {type.label}
                            </option>
                        ))}
                    </select>
                </div>

                {/* Sort By */}
                <div className="filter-group">
                    <label className="filter-label">
                        <span className="label-icon">üîÑ</span>
                        S·∫Øp x·∫øp
                    </label>
                    <select
                        className="filter-select"
                        value={filters.sortBy}
                        onChange={(e) => handleChange('sortBy', e.target.value)}
                    >
                        <option value="newest">M·ªõi nh·∫•t</option>
                        <option value="oldest">C≈© nh·∫•t</option>
                        <option value="title">T√™n A-Z</option>
                        <option value="applications">Nhi·ªÅu ·ª©ng tuy·ªÉn nh·∫•t</option>
                        <option value="views">Nhi·ªÅu l∆∞·ª£t xem nh·∫•t</option>
                    </select>
                </div>
            </div>

            {/* Quick Filters */}
            <div className="quick-filters">
                <button
                    className={`quick-filter-btn ${filters.status === 'all' ? 'active' : ''}`}
                    onClick={() => handleChange('status', 'all')}
                >
                    T·∫•t c·∫£
                </button>
                <button
                    className={`quick-filter-btn ${filters.status === 'published' ? 'active' : ''}`}
                    onClick={() => handleChange('status', 'published')}
                >
                    ‚úÖ ƒê√£ ƒëƒÉng
                </button>
                <button
                    className={`quick-filter-btn ${filters.status === 'draft' ? 'active' : ''}`}
                    onClick={() => handleChange('status', 'draft')}
                >
                    üìù Nh√°p
                </button>
                <button
                    className={`quick-filter-btn ${filters.status === 'closed' ? 'active' : ''}`}
                    onClick={() => handleChange('status', 'closed')}
                >
                    üîí ƒê√£ ƒë√≥ng
                </button>
            </div>

            {/* Reset Button */}
            {(filters.search || filters.status !== 'all' || filters.category !== 'all' || filters.type !== 'all') && (
                <button
                    className="btn-employer btn-employer-secondary btn-reset-filters"
                    onClick={() => onFilterChange({
                        search: '',
                        status: 'all',
                        category: 'all',
                        type: 'all',
                        sortBy: 'newest'
                    })}
                >
                    üîÑ ƒê·∫∑t l·∫°i b·ªô l·ªçc
                </button>
            )}
        </div>
    );
};

export default JobFilters;

