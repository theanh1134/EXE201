// Frontend Email Service s·ª≠ d·ª•ng EmailJS
// C·∫•u h√¨nh EmailJS
const EMAILJS_CONFIG = {
    serviceId: 'service_pocdysd', // ‚úÖ Service ID ƒë√∫ng t·ª´ EmailJS
    templateId: 'template_u4b4325',
    publicKey: '4YSzE4Z6WTrOyeV4a' // ‚úÖ Public Key m·ªõi
};

// Log config ƒë·ªÉ debug
console.log('üìã EmailJS Config loaded:', EMAILJS_CONFIG);

class FrontendEmailService {
    constructor() {
        this.config = EMAILJS_CONFIG;
    }

    // G·ª≠i m√£ OTP x√°c th·ª±c email
    async sendVerificationCode(email, code, fullName) {
        const templateParams = {
            title: `X√°c th·ª±c email - PartGO`,
            name: fullName,
            time: new Date().toLocaleString('vi-VN'),
            message: `Xin ch√†o ${fullName}! C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i PartGO. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c th·ª±c sau: ${code}. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t. Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.`,
            email: email,
            verificationCode: code
        };

        try {
            console.log('üîß EmailJS Config:', this.config);
            console.log('üìß Verification Data:', { email, code, fullName });
            console.log('üì® Template Params:', templateParams);

            // Ki·ªÉm tra EmailJS c√≥ s·∫µn s√†ng kh√¥ng
            if (typeof window.emailjs === 'undefined') {
                throw new Error('EmailJS library ch∆∞a ƒë∆∞·ª£c load t·ª´ CDN');
            }

            console.log('‚úÖ EmailJS library ƒë√£ s·∫µn s√†ng');

            console.log('üöÄ Sending verification email via EmailJS...');
            console.log('üìß Final params:', {
                serviceId: this.config.serviceId,
                templateId: this.config.templateId,
                params: templateParams
            });

            const response = await window.emailjs.send(
                this.config.serviceId,
                this.config.templateId,
                templateParams
            );

            console.log('‚úÖ EmailJS Response:', {
                status: response.status,
                text: response.text,
                full: response
            });

            return { success: true, messageId: response.text };

        } catch (error) {
            console.error('‚ùå EmailJS Error:', {
                message: error?.message,
                status: error?.status,
                text: error?.text,
                error
            });

            // Fallback demo
            console.warn('üîÑ EmailJS failed, using mock email...');
            console.log('üìß ===== MOCK VERIFICATION EMAIL =====');
            console.log('To:', email);
            console.log('Subject:', `X√°c th·ª±c email - PartGO`);
            console.log('Message:', `Xin ch√†o ${fullName}! M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: ${code}`);
            console.log('=====================================');

            return {
                success: true,
                messageId: 'mock-verification-' + Date.now(),
                fallback: true
            };
        }
    }

    // G·ª≠i email ch√†o m·ª´ng sau khi x√°c th·ª±c th√†nh c√¥ng
    async sendWelcomeEmail(email, fullName, role) {
        const templateParams = {
            title: `Ch√†o m·ª´ng ƒë·∫øn v·ªõi PartGO!`,
            name: fullName,
            time: new Date().toLocaleString('vi-VN'),
            message: `Ch√∫c m·ª´ng ${fullName}! T√†i kho·∫£n ${role === 'employer' ? 'nh√† tuy·ªÉn d·ª•ng' : '·ª©ng vi√™n'} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa PartGO ngay b√¢y gi·ªù.`,
            email: email,
            userRole: role === 'employer' ? 'Nh√† tuy·ªÉn d·ª•ng' : '·ª®ng vi√™n'
        };

        try {
            console.log('üîß EmailJS Config:', this.config);
            console.log('üìß Welcome Data:', { email, fullName, role });
            console.log('üì® Template Params:', templateParams);

            // Ki·ªÉm tra EmailJS c√≥ s·∫µn s√†ng kh√¥ng
            if (typeof window.emailjs === 'undefined') {
                throw new Error('EmailJS library ch∆∞a ƒë∆∞·ª£c load t·ª´ CDN');
            }

            console.log('‚úÖ EmailJS library ƒë√£ s·∫µn s√†ng');

            console.log('üöÄ Sending welcome email via EmailJS...');

            const response = await window.emailjs.send(
                this.config.serviceId,
                this.config.templateId,
                templateParams
            );

            console.log('‚úÖ EmailJS Response:', {
                status: response.status,
                text: response.text,
                full: response
            });

            return { success: true, messageId: response.text };

        } catch (error) {
            console.error('‚ùå EmailJS Error:', {
                message: error?.message,
                status: error?.status,
                text: error?.text,
                error
            });

            // Fallback demo
            console.warn('üîÑ EmailJS failed, using mock email...');
            console.log('üìß ===== MOCK WELCOME EMAIL =====');
            console.log('To:', email);
            console.log('Subject:', `Ch√†o m·ª´ng ƒë·∫øn v·ªõi PartGO!`);
            console.log('Message:', `Ch√∫c m·ª´ng ${fullName}! T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng.`);
            console.log('=================================');

            return {
                success: true,
                messageId: 'mock-welcome-' + Date.now(),
                fallback: true
            };
        }
    }

    // G·ª≠i m√£ OTP reset m·∫≠t kh·∫©u
    async sendPasswordResetCode(email, code) {
        const templateParams = {
            title: `Reset m·∫≠t kh·∫©u - PartGO`,
            to_email: email,
            verification_code: code,
            message: `M√£ x√°c th·ª±c reset m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${code}`,
            company_name: 'PartGO',
            support_email: 'support@partgo.com'
        };

        try {
            console.log('üìß Sending password reset code via EmailJS...', {
                to: email,
                code: code
            });

            const result = await window.emailjs.send(
                this.config.serviceId,
                this.config.templateId,
                templateParams,
                this.config.publicKey
            );

            console.log('‚úÖ Password reset code sent successfully:', result);
            return {
                success: true,
                messageId: result.text,
                fallback: false
            };

        } catch (error) {
            console.error('‚ùå EmailJS password reset error:', error);

            // Fallback demo
            console.warn('üîÑ EmailJS failed, using mock email...');
            console.log('üìß ===== MOCK PASSWORD RESET EMAIL =====');
            console.log('To:', email);
            console.log('Subject:', `Reset m·∫≠t kh·∫©u - PartGO`);
            console.log('Message:', `M√£ x√°c th·ª±c reset m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${code}`);
            console.log('=====================================');

            return {
                success: true,
                messageId: 'mock-reset-' + Date.now(),
                fallback: true
            };
        }
    }
}

// Export instance
export default new FrontendEmailService();

